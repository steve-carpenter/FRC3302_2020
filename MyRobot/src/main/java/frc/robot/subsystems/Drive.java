// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.RobotMap;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private Spark leftFront;
private Spark leftRear;
private Spark rightFront;
private Spark rightRear;
private SpeedControllerGroup leftSide;
private SpeedControllerGroup rightSide;
private DifferentialDrive chassis;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Drive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftFront = new Spark(RobotMap.DRIVETRAIN_LEFT_FRONT_SPARK);
addChild("LeftFront",leftFront);
leftFront.setInverted(false);
        
leftRear = new Spark(1);
addChild("LeftRear",leftRear);
leftRear.setInverted(false);
        
rightFront = new Spark(2);
addChild("RightFront",rightFront);
rightFront.setInverted(false);
        
rightRear = new Spark(3);
addChild("RightRear",rightRear);
rightRear.setInverted(false);
        
leftSide = new SpeedControllerGroup(leftFront, leftRear);
rightSide = new SpeedControllerGroup(rightFront, rightRear);

chassis = new DifferentialDrive(leftSide, rightSide);
chassis.setSafetyEnabled(true);
chassis.setExpiration(0.1);
chassis.setMaxOutput(1.0);
        
    }

    @Override
    public void initDefaultCommand() {
        setDefaultCommand(null);
    }

    @Override
    public void periodic() {
    }

    public void arcadeDrive(double moveSpeed, double rotateSpeed) {
		chassis.arcadeDrive(moveSpeed, rotateSpeed);
    }
    
    public void tankDrive(double leftSpeed, double rightSpeed) {
		chassis.tankDrive(leftSpeed, rightSpeed);
	}
}

