// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import com.revrobotics.CANEncoder;
import com.revrobotics.CANPIDController;
import com.revrobotics.CANSparkMax;
import com.revrobotics.ControlType;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import org.opencv.core.RotatedRect;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.RobotMap;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drive extends SubsystemBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax leftFront;
    private CANSparkMax leftRear;
    private CANSparkMax rightFront;
    private CANSparkMax rightRear;
    private CANEncoder leftEncoder;
    private CANEncoder rightEncoder;
    private CANPIDController leftPidController;
    private CANPIDController rightPidController;
    private double afterEncoderReduction = 1;
    private SpeedControllerGroup leftSide;
    private SpeedControllerGroup rightSide;
    private DifferentialDrive chassis;
    private final double kTurnSpeed = 0.5;
    private final int wheelDiameter = 6;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Drive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftFront = new CANSparkMax(RobotMap.DRIVETRAIN_LEFT_FRONT_SPARK, MotorType.kBrushless);
        leftRear = new CANSparkMax(RobotMap.DRIVETRAIN_LEFT_BACK_SPARK, MotorType.kBrushless);
        rightFront = new CANSparkMax(RobotMap.DRIVETRAIN_RIGHT_FRONT_SPARK,MotorType.kBrushless);
        rightRear = new CANSparkMax(RobotMap.DRIVETRAIN_RIGHT_BACK_SPARK, MotorType.kBrushless);
        leftEncoder = leftFront.getEncoder();
        rightEncoder = rightFront.getEncoder();
        leftPidController = leftFront.getPIDController();
        rightPidController = rightFront.getPIDController();
        leftRear.follow(leftFront);
        rightRear.follow(rightFront);

        leftSide = new SpeedControllerGroup(leftFront, leftRear);
        rightSide = new SpeedControllerGroup(rightFront, rightRear);

        chassis = new DifferentialDrive(leftSide, rightSide);

        leftFront.setInverted(false);
        leftRear.setInverted(false);
        rightFront.setInverted(false);
        rightRear.setInverted(false);

        chassis.setSafetyEnabled(true);
        chassis.setExpiration(0.1);
        chassis.setMaxOutput(1.0);

        // addChild("LeftFront", leftFront);
        // addChild("LeftRear", leftRear);
        // addChild("RightFront", rightFront);
        // addChild("RightRear", rightRear);
    }

    @Override
    public void periodic() {
    }

    public void arcadeDrive(double moveSpeed, double rotateSpeed) {
        chassis.arcadeDrive(moveSpeed, rotateSpeed);
    }

    public void tankDrive(double leftSpeed, double rightSpeed) {
        chassis.tankDrive(leftSpeed, rightSpeed);
    }

    public void turnLeft(){
        turnLeft(kTurnSpeed);;
    }

    public void turnLeft(double speed){
        tankDrive(-speed, speed);
    }

    public void turnRight(){
        turnRight(kTurnSpeed);
    }

    public void turnRight(double speed){
        tankDrive(speed, -speed);
    }

    public double getRotationsLeft() {
        return leftEncoder.getPosition() / afterEncoderReduction;
      }
    
      public double getRotationsRight() {
        return rightEncoder.getPosition() / afterEncoderReduction;
      }

      public void resetPosition() {
        leftEncoder.setPosition(0);
        rightEncoder.setPosition(0);
      }

      public void enableBrakeMode(boolean enable) {
        IdleMode mode = enable ? IdleMode.kBrake : IdleMode.kCoast;
        leftFront.setIdleMode(mode);
        leftRear.setIdleMode(mode);
        rightFront.setIdleMode(mode);
        rightRear.setIdleMode(mode);
      }

      public double getDistanceRight() {
        return wheelDiameter * Math.PI * getRotationsRight();
      }

      public double getDistanceLeft() {
        return wheelDiameter * Math.PI * getRotationsLeft();
      }

      public void driveDistance(double inches){
        leftPidController.setReference(inches, ControlType.kSmartMotion);
        rightPidController.setReference(inches, ControlType.kSmartMotion);
      }
}
