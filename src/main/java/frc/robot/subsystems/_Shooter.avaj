package frc.robot.subsystems;

import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.controller.PIDController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.revrobotics.CANEncoder;
import com.revrobotics.CANPIDController;
import com.revrobotics.CANSparkMax;
import com.revrobotics.ControlType;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.RobotMap;
import frc.robot.utils.TunableNumber;
import frc.robot.utils.motors.Motor;
import frc.robot.utils.motors.configurations.FlywheelMotorConfiguration;
import frc.robot.utils.motors.configurations.MotorConfiguration;

public class Shooter extends SubsystemBase {

    //private CANSparkMax flywheel;
    //private CANEncoder flywheelEncoder;
    //private CANPIDController flywheelPIDController;
    private Spark flywheel;
    private Encoder encoder;
    private PIDController pidController;
    private Spark shooterGate;
    private DigitalInput shooterGateOpen;
    private DigitalInput shooterGateClosed;
    private TunableNumber P = new TunableNumber("Shooter PID (P)", 0.0012);
    private TunableNumber I = new TunableNumber("Shooter PID (I)", 0);
    private TunableNumber D = new TunableNumber("Shooter PID (D)", 0);
    private TunableNumber F = new TunableNumber("Shooter PID (F)", 0.00019068);
    private TunableNumber rampRate = new TunableNumber("Shooter (Ramp Rate)", 2);
    private TunableNumber maxOutput = new TunableNumber("Shooter (Max Output)", 1);
    private TunableNumber minOutput = new TunableNumber("Shooter (Min Output)", -1);
    public double kP, kI, kD, kFF, kMaxOutput, kMinOutput, maxRPM;
    private Double lastRampRate = null; // Force this to be updated once
    private static final double MULTIPLIER = 1.5;


    public Shooter(){
        flywheel = new Spark(RobotMap.SHOOTER_FLYWHEEL_SPARK);
        encoder = new Encoder(0,1,false, Encoder.EncodingType.k2X);
        pidController = new PIDController(kP,kI,kD,kFF);
        //flywheelPIDController = flywheel.getPIDController();
        shooterGate = new Spark(RobotMap.SHOOTER_GATE_PWM);
        shooterGateOpen = new DigitalInput(RobotMap.SHOOTER_GATE_PROX);
        shooterGateClosed = new DigitalInput(9);
        shooterGate.setInverted(false);

        //flywheelPIDController.setP(kP);
        //flywheelPIDController.setI(kI);
        //flywheelPIDController.setD(kD);
        //flywheelPIDController.setFF(kFF);
        //flywheelPIDController.setOutputRange(kMinOutput, kMaxOutput);
         
        addChild("ShooterGate", shooterGate);
        addChild("ShooterGateOpen", shooterGateOpen);
        addChild("ShooterGateClosed", shooterGateClosed);  
    }

    @Override
    public void periodic() {
    double p = P.get();
    double i = I.get();
    double d = D.get();
    double ff = F.get();
    double max = maxOutput.get();
    double min = minOutput.get();

    if ((p != kP)) {
      pidController.setP(p);
      //flywheelPIDController.setP(p);
      kP = p;
    }
    if ((i != kI)) {
      pidController.setI(i);
      //flywheelPIDController.setI(i);
      kI = i;
    }
    if ((d != kD)) {
      pidController.setD(d);;
      //flywheelPIDController.setD(d);
      kD = d;
    }
  
    // double currentRampRate = SmartDashboard.getNumber("Shooter FlyWheel/ramp rate", 2);
    // if (lastRampRate != null && currentRampRate != lastRampRate) {
    //   lastRampRate = currentRampRate;
    // }
    // if (SmartDashboard.getBoolean("tuningMode", true)) {
    //   SmartDashboard.putNumber("Shooter FlyWheel/speed", getSpeed());
    //   SmartDashboard.putNumber("Shooter FlyWheel/applied output", flywheel.getAppliedOutput());
    // }

    }

    public boolean isShooterGateOpen(){
        return shooterGateOpen.get();
    }

    public boolean isShooterGateClosed(){
        return shooterGateClosed.get();
    }

    public void setFlywheelSpeed(double setpoint){
        //flywheelPIDController.setReference(setpoint, ControlType.kVelocity);
        pidController.setSetpoint(setpoint);
    }

    public double distanceToSpeed(double distance){
        return distance * 0.75;
    }

    public double getSpeed() {
      if (flywheel == null) {
        return 0;
      }
     // return flywheelEncoder.getVelocity();
     return encoder.getRate();
    }

      public void stop() {
        if (flywheel == null) {
          return;
        }
        flywheel.stopMotor();
      }
    
      public void setShooterRPM(double rpm) {
        if (flywheel == null) {
          return;
        }
        double setpoint = rpm / MULTIPLIER;
        //flywheelPIDController.setReference(setpoint, ControlType.kVelocity);
        pidController.setSetpoint(setpoint);
      }
    
      public void run(double power) {
        if (flywheel == null) {
          return;
        }
        flywheel.set(power);
      }
}
